\begin{figure*}
  \begin{minipage}{2in}
    \begin{adjustwidth}{2em}{}
      \begin{tabular}{|l|l|}
        \hline        
        \scheme|(struct: (alpha) Queue|                  & \\
        ~~~\scheme|([pref  : (Listof alpha)]|            & \scheme|type 'alpha Queue = 'alpha list|\\            
        ~~~~~\scheme|[lenf  : Integer]|                  & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* int|\\               
        ~~~~~\scheme|[front : (Promise (Listof alpha))]| & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* 'alpha list susp| \\
        ~~~~~\scheme|[lenr  : Integer] |                 & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* int|\\              
        ~~~~~\scheme|[rear  : (Listof alpha)]))|         & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* 'alpha list|\\      
        \hline
      \end{tabular}
    \end{adjustwidth}
  \end{minipage}
  \caption{Typed Racket and ML Definition: Physicist's Queue}
  \label{ml:2}
\end{figure*}



\begin{mlexample}
  \begin{minipage}{2in}
    \begin{tabular}{l|l}

%      \begin{schemedisplay}
      %\begin{flushleft}
      & \\
%      & \\
\scheme|(struct: (alpha) Queue|                  & \\
~~~\scheme|([pref  : (Listof alpha)]|            & \scheme|type 'alpha Queue = 'alpha list|\\            
~~~~~\scheme|[lenf  : Integer]|                  & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* int|\\               
~~~~~\scheme|[front : (Promise (Listof alpha))]| & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* 'alpha list susp| \\
~~~~~\scheme|[lenr  : Integer] |                 & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* int|\\              
~~~~~\scheme|[rear  : (Listof alpha)]))|         & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* 'alpha list|\\      


    \end{tabular}
  \end{minipage}
  \label{ml:2}
\end{mlexample}



\begin{mlexample}
  \begin{minipage}{2in}
    \begin{tabular}{l|l}

\scheme|(struct: (alpha) Queue|                  & \\
~~~\scheme|([pref  : (Listof alpha)]|            & \\
~~~~~\scheme|[lenf  : Integer]|                  & \scheme|type 'alpha Queue = 'alpha list|\\                                
~~~~~\scheme|[front : (Promise (Listof alpha))]| & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* int * 'alpha list susp|\\
~~~~~\scheme|[lenr  : Integer] |                 & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* int * 'alpha list| \\ 
~~~~~\scheme|[rear  : (Listof alpha)]))|         & \\      


    \end{tabular}
  \end{minipage}
  \label{ml:2}
\end{mlexample}


    (struct: (alpha) Queue
      ([lenf  : Integer]
       [front : (Stream alpha)]
       [lenr  : Integer]
       [rear  : (Stream alpha)]))


    type 'alpha Queue = int * 'alpha Stream * int * 'alpha Stream

    \begin{figure*}
      \begin{minipage}{2in}
        \begin{adjustwidth}{3em}{}
          \begin{tabular}{|l|l|}
            \hline        
            \scheme|(struct: (alpha) Queue|        & \\
            ~~~\scheme|([lenf  : Integer]|         & \scheme|type 'alpha Queue = int|\\            
            ~~~~~\scheme|[front : (Stream alpha)]| & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* 'alpha Stream|\\               
            ~~~~~\scheme|[lenr  : Integer]|        & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* int| \\
            ~~~~~\scheme|[rear  : (Stream alpha)]| & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* 'alpha Stream|\\              
            \hline
          \end{tabular}
        \end{adjustwidth}
      \end{minipage}
      \caption{Typed Racket and ML Definition: Banker's Queue}
      \label{ml:1}
    \end{figure*}


    datatype a Queue = Queue {F : a Stream, LenF : int, R : a Stream, LenR : int}


    \begin{figure*}
      \begin{minipage}{2in}
        \begin{adjustwidth}{3em}{}
          \begin{tabular}{|l|l|}
            \hline        
            \scheme|(define-type (Tree alpha) (U Leaf (Node alpha)))|                  & \\
             & \scheme|type 'alpha Queue = 'alpha list|\\            
            \scheme|(struct: Leaf ())|                  & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* int|\\               
             & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* 'alpha list susp| \\
            \scheme|(struct: (alpha) Node|                 & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* int|\\              
            ~~~~\scheme|([data : alpha]|         & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* 'alpha list|\\
            ~~~~~\scheme|[left   : (Tree alpha)]|         & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* 'alpha list|\\
            ~~~~~\scheme|[right : (Tree alpha)]))|         & ~~~~~~~~~~~~~~~~~~~~~~~~\scheme|* 'alpha list|\\      
            \hline
          \end{tabular}
        \end{adjustwidth}
      \end{minipage}
      \caption{Typed Racket and ML Definition: Binary Tree}
      \label{ml:3}
    \end{figure*}


     

 
    
    


   
 datatype 'alpha tree = Node of {data : 'alpha, left : 'alpha tree, right : 'alpha tree}
                      |  Leaf;
