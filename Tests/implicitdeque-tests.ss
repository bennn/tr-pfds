#lang typed-scheme
(require "../implicitdeque.ss")
(require typed/test-engine/scheme-tests)

(check-expect (empty? empty) #t)
(check-expect (empty? (deque 1)) #f)
(check-expect (head (deque 1)) 1)
(check-expect (last (deque 1)) 1)
(check-expect (head (deque 4 5 1 2 -1)) 4)
(check-expect (head (tail (deque 4 5 1 2 -1))) 5)
(check-expect (last (deque 4 5 1 2 -1)) -1)
(check-expect (last (init (deque 4 5 1 2 -1))) 2)
(check-expect (head (tail (init (deque 4 5 1 2 -1)))) 5)
(check-expect (last (tail (init (deque 4 5 1 2 -1)))) 2)

(check-error (head (tail (deque 1))) "Queue is empty : head")
(check-error (last (tail (deque 1))) "Queue is empty : last")
(check-error (tail (tail (deque 1))) "Queue is empty : tail")
(check-error (init (tail (deque 1))) "Queue is empty : init")

(check-expect (deque->list (tail (deque 1))) null)
(check-expect (deque->list (init (deque 1))) null)
(check-expect (deque->list (tail (deque 1 2 3 4))) 
              (list 2 3 4))
(check-expect (deque->list (init (deque 1 2 3 4))) 
              (list 1 2 3))

(check-expect (deque->list (enqueue 1 empty)) (list 1))
(check-expect (deque->list (enqueue-front 10 (enqueue-front 1 empty))) 
              (list 10 1))
(check-expect (deque->list (enqueue 1 (deque 2))) (list 2 1))
(check-expect (deque->list (enqueue-front 1 (deque 2 3 4 5))) 
              (list 1 2 3 4 5))
(check-expect (deque->list (enqueue 10 (enqueue 1 (deque 2 3 4 5)))) 
              (list 2 3 4 5 1 10))
(check-expect (deque->list (enqueue-front 1 (deque 2 3))) 
              (list 1 2 3))

(test)