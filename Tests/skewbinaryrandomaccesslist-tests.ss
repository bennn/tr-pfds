#lang typed-scheme
(require "../skewbinaryrandomaccesslist.ss")
(require typed/test-engine/scheme-tests)

(check-expect (empty? empty) #t)
(check-expect (empty? (ralist 1 2 3)) #f)
(check-expect (head (ralist 1 2 3)) 1)
(check-expect (head (ralist 2 3)) 2)
(check-error (head null) "List is empty : head")

(check-expect (ralist->list (tail (ralist 1 2 3))) (list 2 3))
(check-expect (ralist->list (tail (ralist 2 3))) (list 3))
(check-expect (ralist->list (tail (ralist 3))) null)
(check-error (tail null) "List is empty : tail")

(check-expect (ralist->list (ralist-cons 5 (ralist 1 2 3))) 
              (list 5 1 2 3))
(check-expect (ralist->list (ralist-cons 10 (ralist 2 3))) 
              (list 10 2 3))
(check-expect (ralist->list (ralist-cons 12 (ralist 3))) 
              (list 12 3))
(check-expect (ralist->list (ralist-cons 12 null)) 
              (list 12))

(check-expect (ralist->list (update (ralist 1 2 3) 2 5)) 
              (list 1 2 5))
(check-expect (ralist->list (update (ralist 1 2 3 5 6) 4 10)) 
              (list 1 2 3 5 10))
(check-error (update (ralist 1 2 3 5) 4 10) 
             "Index out of bound : update")
(check-error (update null 0 10)
             "Index out of bound : update")
(check-error (update null -1 10)
             "Index out of bound : update")

(check-expect (lookup (ralist 1 2 3) 2) 3)
(check-expect (lookup (ralist 1 2 3) 0) 1)
(check-expect (lookup (ralist 1 2 3) 1) 2)
(check-error (lookup (ralist 1 2 3 5) 4) 
             "Index out of bound : lookup")
(check-error (lookup null 0)
             "Index out of bound : lookup")
(check-error (lookup null -1)
             "Index out of bound : lookup")

(check-expect (ralist->list (drop (ralist 1 2 3) 2)) 
              (list 3))
(check-expect (ralist->list (drop (ralist 1 2 3 5 6) 5)) 
              (list))
(check-expect (ralist->list (drop (ralist 1 2 3 5 6) 3)) 
              (list 5 6))
(check-expect (drop null 0) null)
(check-error (drop (ralist 1 2 3 5) 5) 
             "Index out of bound : drop")
(check-error (drop null -1)
             "Index out of bound : drop")

(define lst (build-list 100 (Î»(x) x)))
(check-expect (ralist->list (apply ralist lst)) lst)

(check-expect (list-length (ralist 1 2 3)) 3)
(check-expect (list-length (ralist 1 2 3 10 12)) 5)
(check-expect (list-length null) 0)
(test)