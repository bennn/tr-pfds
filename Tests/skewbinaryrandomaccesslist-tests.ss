#lang typed-scheme
(require "../skewbinaryrandomaccesslist.ss")
(require typed/test-engine/scheme-tests)

(check-expect (empty? empty) #t)
(check-expect (empty? (ralist 1 2 3)) #f)
(check-expect (head (ralist 1 2 3)) 1)
(check-expect (head (ralist 2 3)) 2)
(check-error (head null) "head: given list is empty")

(check-expect (ralist->list (tail (ralist 1 2 3))) (list 2 3))
(check-expect (ralist->list (tail (ralist 2 3))) (list 3))
(check-expect (ralist->list (tail (ralist 3))) null)
(check-error (tail null) "tail: given list is empty")

(check-expect (ralist->list (kons 5 (ralist 1 2 3))) 
              (list 5 1 2 3))
(check-expect (ralist->list (kons 10 (ralist 2 3))) 
              (list 10 2 3))
(check-expect (ralist->list (kons 12 (ralist 3))) 
              (list 12 3))
(check-expect (ralist->list (kons 12 null)) 
              (list 12))

(check-expect (ralist->list (update 2 (ralist 1 2 3) 5)) 
              (list 1 2 5))
(check-expect (ralist->list (update 4 (ralist 1 2 3 5 6) 10)) 
              (list 1 2 3 5 10))
(check-error (update 4 (ralist 1 2 3 5) 10) 
             "update: given index out of bounds")
(check-error (update 0 null 10)
             "update: given index out of bounds")
(check-error (update -1 null 10)
             "update: given index out of bounds")

(check-expect (lookup 2 (ralist 1 2 3)) 3)
(check-expect (lookup 0 (ralist 1 2 3)) 1)
(check-expect (lookup 1 (ralist 1 2 3)) 2)
(check-error (lookup 4 (ralist 1 2 3 5)) 
             "lookup: given index out of bounds")
(check-error (lookup 0 null)
             "lookup: given index out of bounds")
(check-error (lookup -1 null)
             "lookup: given index out of bounds")

(check-expect (ralist->list (drop 2 (ralist 1 2 3))) 
              (list 3))
(check-expect (ralist->list (drop 5 (ralist 1 2 3 5 6))) 
              (list))
(check-expect (ralist->list (drop 3 (ralist 1 2 3 5 6))) 
              (list 5 6))
(check-expect (drop 0 null) null)
(check-error (drop 5 (ralist 1 2 3 5)) 
             "drop: given index out of bounds")
(check-error (drop -1 null)
             "drop: given index out of bounds")

(define lst (build-list 100 (Î»(x) x)))
(check-expect (ralist->list (apply ralist lst)) lst)

(check-expect (list-length (ralist 1 2 3)) 3)
(check-expect (list-length (ralist 1 2 3 10 12)) 5)
(check-expect (list-length null) 0)
(test)
