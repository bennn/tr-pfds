#lang typed-scheme
(require (prefix-in sh: scheme/base))
(require "../skewbinaryrandomaccesslist.ss")
(require typed/test-engine/scheme-tests)

(check-expect (empty? empty) #t)
(check-expect (empty? (list 1 2 3)) #f)
(check-expect (head (list 1 2 3)) 1)
(check-expect (head (list 2 3)) 2)
(check-error (head null) "head: given list is empty")

(check-expect (->list (tail (list 1 2 3))) (sh:list 2 3))
(check-expect (->list (tail (list 2 3))) (sh:list 3))
(check-expect (->list (tail (list 3))) null)
(check-error (tail null) "tail: given list is empty")

(check-expect (->list (cons 5 (list 1 2 3))) 
              (sh:list 5 1 2 3))
(check-expect (->list (cons 10 (list 2 3))) 
              (sh:list 10 2 3))
(check-expect (->list (cons 12 (list 3))) 
              (sh:list 12 3))
(check-expect (->list (cons 12 null)) 
              (sh:list 12))

(check-expect (->list (list-set 2 (list 1 2 3) 5)) 
              (sh:list 1 2 5))
(check-expect (->list (list-set 4 (list 1 2 3 5 6) 10)) 
              (sh:list 1 2 3 5 10))
(check-error (list-set 4 (list 1 2 3 5) 10) 
             "list-set: given index out of bounds")
(check-error (list-set 0 null 10)
             "list-set: given index out of bounds")
(check-error (list-set -1 null 10)
             "list-set: given index out of bounds")

(check-expect (list-ref 2 (list 1 2 3)) 3)
(check-expect (list-ref 0 (list 1 2 3)) 1)
(check-expect (list-ref 1 (list 1 2 3)) 2)
(check-error (list-ref 4 (list 1 2 3 5)) 
             "list-ref: given index out of bounds")
(check-error (list-ref 0 null)
             "list-ref: given index out of bounds")
(check-error (list-ref -1 null)
             "list-ref: given index out of bounds")

(check-expect (->list (drop 2 (list 1 2 3))) 
              (sh:list 3))
(check-expect (->list (drop 5 (list 1 2 3 5 6))) 
              (sh:list))
(check-expect (->list (drop 3 (list 1 2 3 5 6))) 
              (sh:list 5 6))
(check-expect (drop 0 null) null)
(check-error (drop 5 (list 1 2 3 5)) 
             "drop: given index out of bounds")
(check-error (drop -1 null)
             "drop: given index out of bounds")

(define lst (build-list 100 (Î»(x) x)))
(check-expect (->list (apply list lst)) lst)

(check-expect (list-length (list 1 2 3)) 3)
(check-expect (list-length (list 1 2 3 10 12)) 5)
(check-expect (list-length null) 0)
(test)
